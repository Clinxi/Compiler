Terminals unused in grammar

    GT
    LT


Rules useless in parser due to conflicts

   30 FuncType: INT


State 3 conflicts: 1 reduce/reduce
State 165 conflicts: 1 shift/reduce


Grammar

    0 $accept: CompUnit $end

    1 CompUnit: CompUnit Decl
    2         | CompUnit FuncDef
    3         | ε

    4 Decl: ConstDecl
    5     | VarDecl

    6 ConstDecl: CONST BType ConstDef ConstDefList ';'

    7 ConstDefList: ε
    8             | ',' ConstDef ConstDefList

    9 BType: INT

   10 ConstDef: IDENT ConstExpList '=' ConstInitVal

   11 ConstExpList: ε
   12             | '[' ConstExp ']' ConstExpList

   13 ConstInitVal: ConstExp
   14             | '{' '}'
   15             | '{' ConstInitVal ConstInitValList '}'

   16 ConstInitValList: ε
   17                 | ',' ConstInitVal ConstInitValList

   18 VarDecl: BType VarDef VarDefList ';'

   19 VarDefList: ε
   20           | ',' VarDef VarDefList

   21 VarDef: IDENT ConstExpList
   22       | IDENT ConstExpList '=' InitVal

   23 InitVal: Exp
   24        | '{' '}'
   25        | '{' InitVal InitValList '}'

   26 InitValList: ε
   27            | ',' InitVal InitValList

   28 FuncDef: FuncType IDENT '(' ')' Block
   29        | FuncType IDENT '(' FuncFParams ')' Block

   30 FuncType: INT
   31         | VOID

   32 FuncFParams: FuncFParam FuncFParamsList

   33 FuncFParamsList: ε
   34                | ',' FuncFParam FuncFParamsList

   35 FuncFParam: BType IDENT
   36           | BType IDENT '[' ']' ConstExpList

   37 Block: '{' BlockItemList '}'

   38 BlockItemList: ε
   39              | BlockItem BlockItemList

   40 BlockItem: Decl
   41          | Stmt

   42 Stmt: LVal '=' Exp ';'
   43     | ';'
   44     | Exp ';'
   45     | Block
   46     | IF '(' Exp ')' Stmt
   47     | IF '(' Exp ')' Stmt ELSE Stmt
   48     | WHILE '(' Exp ')' Stmt
   49     | BREAK ';'
   50     | CONTINUE ';'
   51     | RETURN ';'
   52     | RETURN Exp ';'

   53 Exp: LOrExp

   54 LVal: IDENT ExpList1

   55 ExpList1: ε
   56         | '[' Exp ']' ExpList1

   57 PrimaryExp: '(' Exp ')'
   58           | LVal
   59           | Number

   60 Number: INT_CONST

   61 UnaryExp: PrimaryExp
   62         | IDENT '(' ')'
   63         | IDENT '(' FuncRParams ')'
   64         | UnaryOp UnaryExp

   65 UnaryOp: '+'
   66        | '-'
   67        | '!'

   68 FuncRParams: Exp ExpList2

   69 ExpList2: ε
   70         | ',' Exp ExpList2

   71 MulExp: UnaryExp
   72       | MulExp '*' UnaryExp
   73       | MulExp '/' UnaryExp
   74       | MulExp '%' UnaryExp

   75 AddExp: MulExp
   76       | AddExp '+' MulExp
   77       | AddExp '-' MulExp

   78 RelExp: AddExp
   79       | RelExp '<' AddExp
   80       | RelExp '>' AddExp
   81       | RelExp LE AddExp
   82       | RelExp GE AddExp

   83 EqExp: RelExp
   84      | EqExp EQ RelExp
   85      | EqExp NE RelExp

   86 LAndExp: EqExp
   87        | LAndExp AND EqExp

   88 LOrExp: LAndExp
   89       | LOrExp OR LAndExp

   90 ConstExp: Exp


Terminals, with rules where they appear

    $end (0) 0
    '!' (33) 67
    '%' (37) 74
    '(' (40) 28 29 46 47 48 57 62 63
    ')' (41) 28 29 46 47 48 57 62 63
    '*' (42) 72
    '+' (43) 65 76
    ',' (44) 8 17 20 27 34 70
    '-' (45) 66 77
    '/' (47) 73
    ';' (59) 6 18 42 43 44 49 50 51 52
    '<' (60) 79
    '=' (61) 10 22 42
    '>' (62) 80
    '[' (91) 12 36 56
    ']' (93) 12 36 56
    '{' (123) 14 15 24 25 37
    '}' (125) 14 15 24 25 37
    error (256)
    INT (258) 9 30
    RETURN (259) 51 52
    VOID (260) 31
    CONST (261) 6
    IF (262) 46 47
    ELSE (263) 47
    WHILE (264) 48
    BREAK (265) 49
    CONTINUE (266) 50
    GE (267) 82
    LE (268) 81
    GT (269)
    LT (270)
    EQ (271) 84
    NE (272) 85
    AND (273) 87
    OR (274) 89
    IDENT <str_val> (275) 10 21 22 28 29 35 36 54 62 63
    INT_CONST <int_val> (276) 60


Nonterminals, with rules where they appear

    $accept (39)
        on left: 0
    CompUnit <ast_val> (40)
        on left: 1 2 3
        on right: 0 1 2
    Decl <ast_val> (41)
        on left: 4 5
        on right: 1 40
    ConstDecl <ast_val> (42)
        on left: 6
        on right: 4
    ConstDefList <ast_val> (43)
        on left: 7 8
        on right: 6 8
    BType <ast_val> (44)
        on left: 9
        on right: 6 18 35 36
    ConstDef <ast_val> (45)
        on left: 10
        on right: 6 8
    ConstExpList <ast_val> (46)
        on left: 11 12
        on right: 10 12 21 22 36
    ConstInitVal <ast_val> (47)
        on left: 13 14 15
        on right: 10 15 17
    ConstInitValList <ast_val> (48)
        on left: 16 17
        on right: 15 17
    VarDecl <ast_val> (49)
        on left: 18
        on right: 5
    VarDefList <ast_val> (50)
        on left: 19 20
        on right: 18 20
    VarDef <ast_val> (51)
        on left: 21 22
        on right: 18 20
    InitVal <ast_val> (52)
        on left: 23 24 25
        on right: 22 25 27
    InitValList <ast_val> (53)
        on left: 26 27
        on right: 25 27
    FuncDef <ast_val> (54)
        on left: 28 29
        on right: 2
    FuncType <ast_val> (55)
        on left: 30 31
        on right: 28 29
    FuncFParams <ast_val> (56)
        on left: 32
        on right: 29
    FuncFParamsList <ast_val> (57)
        on left: 33 34
        on right: 32 34
    FuncFParam <ast_val> (58)
        on left: 35 36
        on right: 32 34
    Block <ast_val> (59)
        on left: 37
        on right: 28 29 45
    BlockItemList <ast_val> (60)
        on left: 38 39
        on right: 37 39
    BlockItem <ast_val> (61)
        on left: 40 41
        on right: 39
    Stmt <ast_val> (62)
        on left: 42 43 44 45 46 47 48 49 50 51 52
        on right: 41 46 47 48
    Exp (63)
        on left: 53
        on right: 23 42 44 46 47 48 52 56 57 68 70 90
    LVal <ast_val> (64)
        on left: 54
        on right: 42 58
    ExpList1 <ast_val> (65)
        on left: 55 56
        on right: 54 56
    PrimaryExp <ast_val> (66)
        on left: 57 58 59
        on right: 61
    Number <ast_val> (67)
        on left: 60
        on right: 59
    UnaryExp <ast_val> (68)
        on left: 61 62 63 64
        on right: 64 71 72 73 74
    UnaryOp <ast_val> (69)
        on left: 65 66 67
        on right: 64
    FuncRParams <ast_val> (70)
        on left: 68
        on right: 63
    ExpList2 <ast_val> (71)
        on left: 69 70
        on right: 68 70
    MulExp <ast_val> (72)
        on left: 71 72 73 74
        on right: 72 73 74 75 76 77
    AddExp <ast_val> (73)
        on left: 75 76 77
        on right: 76 77 78 79 80 81 82
    RelExp <ast_val> (74)
        on left: 78 79 80 81 82
        on right: 79 80 81 82 83 84 85
    EqExp <ast_val> (75)
        on left: 83 84 85
        on right: 84 85 86 87
    LAndExp <ast_val> (76)
        on left: 86 87
        on right: 87 88 89
    LOrExp <ast_val> (77)
        on left: 88 89
        on right: 53 89
    ConstExp <ast_val> (78)
        on left: 90
        on right: 12 13


State 0

    0 $accept: • CompUnit $end

    $default  reduce using rule 3 (CompUnit)

    CompUnit  go to state 1


State 1

    0 $accept: CompUnit • $end
    1 CompUnit: CompUnit • Decl
    2         | CompUnit • FuncDef

    $end   shift, and go to state 2
    INT    shift, and go to state 3
    VOID   shift, and go to state 4
    CONST  shift, and go to state 5

    Decl       go to state 6
    ConstDecl  go to state 7
    BType      go to state 8
    VarDecl    go to state 9
    FuncDef    go to state 10
    FuncType   go to state 11


State 2

    0 $accept: CompUnit $end •

    $default  accept


State 3

    9 BType: INT •
   30 FuncType: INT •

    IDENT     reduce using rule 9 (BType)
    IDENT     [reduce using rule 30 (FuncType)]
    $default  reduce using rule 9 (BType)

    reduce/reduce conflict on token IDENT:
        9 BType: INT •
       30 FuncType: INT •
      First example: CompUnit INT • IDENT ConstExpList VarDefList ';' $end
      First reduce derivation
        $accept
        ↳ 0: CompUnit                                                                    $end
             ↳ 1: CompUnit Decl
                           ↳ 5: VarDecl
                                ↳ 18: BType      VarDef                   VarDefList ';'
                                      ↳ 9: INT • ↳ 21: IDENT ConstExpList
      Second example: CompUnit INT • IDENT '(' ')' Block $end
      Second reduce derivation
        $accept
        ↳ 0: CompUnit                                            $end
             ↳ 2: CompUnit FuncDef
                           ↳ 28: FuncType    IDENT '(' ')' Block
                                 ↳ 30: INT •



State 4

   31 FuncType: VOID •

    $default  reduce using rule 31 (FuncType)


State 5

    6 ConstDecl: CONST • BType ConstDef ConstDefList ';'

    INT  shift, and go to state 12

    BType  go to state 13


State 6

    1 CompUnit: CompUnit Decl •

    $default  reduce using rule 1 (CompUnit)


State 7

    4 Decl: ConstDecl •

    $default  reduce using rule 4 (Decl)


State 8

   18 VarDecl: BType • VarDef VarDefList ';'

    IDENT  shift, and go to state 14

    VarDef  go to state 15


State 9

    5 Decl: VarDecl •

    $default  reduce using rule 5 (Decl)


State 10

    2 CompUnit: CompUnit FuncDef •

    $default  reduce using rule 2 (CompUnit)


State 11

   28 FuncDef: FuncType • IDENT '(' ')' Block
   29        | FuncType • IDENT '(' FuncFParams ')' Block

    IDENT  shift, and go to state 16


State 12

    9 BType: INT •

    $default  reduce using rule 9 (BType)


State 13

    6 ConstDecl: CONST BType • ConstDef ConstDefList ';'

    IDENT  shift, and go to state 17

    ConstDef  go to state 18


State 14

   21 VarDef: IDENT • ConstExpList
   22       | IDENT • ConstExpList '=' InitVal

    '['  shift, and go to state 19

    $default  reduce using rule 11 (ConstExpList)

    ConstExpList  go to state 20


State 15

   18 VarDecl: BType VarDef • VarDefList ';'

    ','  shift, and go to state 21

    $default  reduce using rule 19 (VarDefList)

    VarDefList  go to state 22


State 16

   28 FuncDef: FuncType IDENT • '(' ')' Block
   29        | FuncType IDENT • '(' FuncFParams ')' Block

    '('  shift, and go to state 23


State 17

   10 ConstDef: IDENT • ConstExpList '=' ConstInitVal

    '['  shift, and go to state 19

    $default  reduce using rule 11 (ConstExpList)

    ConstExpList  go to state 24


State 18

    6 ConstDecl: CONST BType ConstDef • ConstDefList ';'

    ','  shift, and go to state 25

    $default  reduce using rule 7 (ConstDefList)

    ConstDefList  go to state 26


State 19

   12 ConstExpList: '[' • ConstExp ']' ConstExpList

    IDENT      shift, and go to state 27
    INT_CONST  shift, and go to state 28
    '('        shift, and go to state 29
    '+'        shift, and go to state 30
    '-'        shift, and go to state 31
    '!'        shift, and go to state 32

    Exp         go to state 33
    LVal        go to state 34
    PrimaryExp  go to state 35
    Number      go to state 36
    UnaryExp    go to state 37
    UnaryOp     go to state 38
    MulExp      go to state 39
    AddExp      go to state 40
    RelExp      go to state 41
    EqExp       go to state 42
    LAndExp     go to state 43
    LOrExp      go to state 44
    ConstExp    go to state 45


State 20

   21 VarDef: IDENT ConstExpList •
   22       | IDENT ConstExpList • '=' InitVal

    '='  shift, and go to state 46

    $default  reduce using rule 21 (VarDef)


State 21

   20 VarDefList: ',' • VarDef VarDefList

    IDENT  shift, and go to state 14

    VarDef  go to state 47


State 22

   18 VarDecl: BType VarDef VarDefList • ';'

    ';'  shift, and go to state 48


State 23

   28 FuncDef: FuncType IDENT '(' • ')' Block
   29        | FuncType IDENT '(' • FuncFParams ')' Block

    INT  shift, and go to state 12
    ')'  shift, and go to state 49

    BType        go to state 50
    FuncFParams  go to state 51
    FuncFParam   go to state 52


State 24

   10 ConstDef: IDENT ConstExpList • '=' ConstInitVal

    '='  shift, and go to state 53


State 25

    8 ConstDefList: ',' • ConstDef ConstDefList

    IDENT  shift, and go to state 17

    ConstDef  go to state 54


State 26

    6 ConstDecl: CONST BType ConstDef ConstDefList • ';'

    ';'  shift, and go to state 55


State 27

   54 LVal: IDENT • ExpList1
   62 UnaryExp: IDENT • '(' ')'
   63         | IDENT • '(' FuncRParams ')'

    '['  shift, and go to state 56
    '('  shift, and go to state 57

    $default  reduce using rule 55 (ExpList1)

    ExpList1  go to state 58


State 28

   60 Number: INT_CONST •

    $default  reduce using rule 60 (Number)


State 29

   57 PrimaryExp: '(' • Exp ')'

    IDENT      shift, and go to state 27
    INT_CONST  shift, and go to state 28
    '('        shift, and go to state 29
    '+'        shift, and go to state 30
    '-'        shift, and go to state 31
    '!'        shift, and go to state 32

    Exp         go to state 59
    LVal        go to state 34
    PrimaryExp  go to state 35
    Number      go to state 36
    UnaryExp    go to state 37
    UnaryOp     go to state 38
    MulExp      go to state 39
    AddExp      go to state 40
    RelExp      go to state 41
    EqExp       go to state 42
    LAndExp     go to state 43
    LOrExp      go to state 44


State 30

   65 UnaryOp: '+' •

    $default  reduce using rule 65 (UnaryOp)


State 31

   66 UnaryOp: '-' •

    $default  reduce using rule 66 (UnaryOp)


State 32

   67 UnaryOp: '!' •

    $default  reduce using rule 67 (UnaryOp)


State 33

   90 ConstExp: Exp •

    $default  reduce using rule 90 (ConstExp)


State 34

   58 PrimaryExp: LVal •

    $default  reduce using rule 58 (PrimaryExp)


State 35

   61 UnaryExp: PrimaryExp •

    $default  reduce using rule 61 (UnaryExp)


State 36

   59 PrimaryExp: Number •

    $default  reduce using rule 59 (PrimaryExp)


State 37

   71 MulExp: UnaryExp •

    $default  reduce using rule 71 (MulExp)


State 38

   64 UnaryExp: UnaryOp • UnaryExp

    IDENT      shift, and go to state 27
    INT_CONST  shift, and go to state 28
    '('        shift, and go to state 29
    '+'        shift, and go to state 30
    '-'        shift, and go to state 31
    '!'        shift, and go to state 32

    LVal        go to state 34
    PrimaryExp  go to state 35
    Number      go to state 36
    UnaryExp    go to state 60
    UnaryOp     go to state 38


State 39

   72 MulExp: MulExp • '*' UnaryExp
   73       | MulExp • '/' UnaryExp
   74       | MulExp • '%' UnaryExp
   75 AddExp: MulExp •

    '*'  shift, and go to state 61
    '/'  shift, and go to state 62
    '%'  shift, and go to state 63

    $default  reduce using rule 75 (AddExp)


State 40

   76 AddExp: AddExp • '+' MulExp
   77       | AddExp • '-' MulExp
   78 RelExp: AddExp •

    '+'  shift, and go to state 64
    '-'  shift, and go to state 65

    $default  reduce using rule 78 (RelExp)


State 41

   79 RelExp: RelExp • '<' AddExp
   80       | RelExp • '>' AddExp
   81       | RelExp • LE AddExp
   82       | RelExp • GE AddExp
   83 EqExp: RelExp •

    GE   shift, and go to state 66
    LE   shift, and go to state 67
    '<'  shift, and go to state 68
    '>'  shift, and go to state 69

    $default  reduce using rule 83 (EqExp)


State 42

   84 EqExp: EqExp • EQ RelExp
   85      | EqExp • NE RelExp
   86 LAndExp: EqExp •

    EQ  shift, and go to state 70
    NE  shift, and go to state 71

    $default  reduce using rule 86 (LAndExp)


State 43

   87 LAndExp: LAndExp • AND EqExp
   88 LOrExp: LAndExp •

    AND  shift, and go to state 72

    $default  reduce using rule 88 (LOrExp)


State 44

   53 Exp: LOrExp •
   89 LOrExp: LOrExp • OR LAndExp

    OR  shift, and go to state 73

    $default  reduce using rule 53 (Exp)


State 45

   12 ConstExpList: '[' ConstExp • ']' ConstExpList

    ']'  shift, and go to state 74


State 46

   22 VarDef: IDENT ConstExpList '=' • InitVal

    IDENT      shift, and go to state 27
    INT_CONST  shift, and go to state 28
    '{'        shift, and go to state 75
    '('        shift, and go to state 29
    '+'        shift, and go to state 30
    '-'        shift, and go to state 31
    '!'        shift, and go to state 32

    InitVal     go to state 76
    Exp         go to state 77
    LVal        go to state 34
    PrimaryExp  go to state 35
    Number      go to state 36
    UnaryExp    go to state 37
    UnaryOp     go to state 38
    MulExp      go to state 39
    AddExp      go to state 40
    RelExp      go to state 41
    EqExp       go to state 42
    LAndExp     go to state 43
    LOrExp      go to state 44


State 47

   20 VarDefList: ',' VarDef • VarDefList

    ','  shift, and go to state 21

    $default  reduce using rule 19 (VarDefList)

    VarDefList  go to state 78


State 48

   18 VarDecl: BType VarDef VarDefList ';' •

    $default  reduce using rule 18 (VarDecl)


State 49

   28 FuncDef: FuncType IDENT '(' ')' • Block

    '{'  shift, and go to state 79

    Block  go to state 80


State 50

   35 FuncFParam: BType • IDENT
   36           | BType • IDENT '[' ']' ConstExpList

    IDENT  shift, and go to state 81


State 51

   29 FuncDef: FuncType IDENT '(' FuncFParams • ')' Block

    ')'  shift, and go to state 82


State 52

   32 FuncFParams: FuncFParam • FuncFParamsList

    ','  shift, and go to state 83

    $default  reduce using rule 33 (FuncFParamsList)

    FuncFParamsList  go to state 84


State 53

   10 ConstDef: IDENT ConstExpList '=' • ConstInitVal

    IDENT      shift, and go to state 27
    INT_CONST  shift, and go to state 28
    '{'        shift, and go to state 85
    '('        shift, and go to state 29
    '+'        shift, and go to state 30
    '-'        shift, and go to state 31
    '!'        shift, and go to state 32

    ConstInitVal  go to state 86
    Exp           go to state 33
    LVal          go to state 34
    PrimaryExp    go to state 35
    Number        go to state 36
    UnaryExp      go to state 37
    UnaryOp       go to state 38
    MulExp        go to state 39
    AddExp        go to state 40
    RelExp        go to state 41
    EqExp         go to state 42
    LAndExp       go to state 43
    LOrExp        go to state 44
    ConstExp      go to state 87


State 54

    8 ConstDefList: ',' ConstDef • ConstDefList

    ','  shift, and go to state 25

    $default  reduce using rule 7 (ConstDefList)

    ConstDefList  go to state 88


State 55

    6 ConstDecl: CONST BType ConstDef ConstDefList ';' •

    $default  reduce using rule 6 (ConstDecl)


State 56

   56 ExpList1: '[' • Exp ']' ExpList1

    IDENT      shift, and go to state 27
    INT_CONST  shift, and go to state 28
    '('        shift, and go to state 29
    '+'        shift, and go to state 30
    '-'        shift, and go to state 31
    '!'        shift, and go to state 32

    Exp         go to state 89
    LVal        go to state 34
    PrimaryExp  go to state 35
    Number      go to state 36
    UnaryExp    go to state 37
    UnaryOp     go to state 38
    MulExp      go to state 39
    AddExp      go to state 40
    RelExp      go to state 41
    EqExp       go to state 42
    LAndExp     go to state 43
    LOrExp      go to state 44


State 57

   62 UnaryExp: IDENT '(' • ')'
   63         | IDENT '(' • FuncRParams ')'

    IDENT      shift, and go to state 27
    INT_CONST  shift, and go to state 28
    '('        shift, and go to state 29
    ')'        shift, and go to state 90
    '+'        shift, and go to state 30
    '-'        shift, and go to state 31
    '!'        shift, and go to state 32

    Exp          go to state 91
    LVal         go to state 34
    PrimaryExp   go to state 35
    Number       go to state 36
    UnaryExp     go to state 37
    UnaryOp      go to state 38
    FuncRParams  go to state 92
    MulExp       go to state 39
    AddExp       go to state 40
    RelExp       go to state 41
    EqExp        go to state 42
    LAndExp      go to state 43
    LOrExp       go to state 44


State 58

   54 LVal: IDENT ExpList1 •

    $default  reduce using rule 54 (LVal)


State 59

   57 PrimaryExp: '(' Exp • ')'

    ')'  shift, and go to state 93


State 60

   64 UnaryExp: UnaryOp UnaryExp •

    $default  reduce using rule 64 (UnaryExp)


State 61

   72 MulExp: MulExp '*' • UnaryExp

    IDENT      shift, and go to state 27
    INT_CONST  shift, and go to state 28
    '('        shift, and go to state 29
    '+'        shift, and go to state 30
    '-'        shift, and go to state 31
    '!'        shift, and go to state 32

    LVal        go to state 34
    PrimaryExp  go to state 35
    Number      go to state 36
    UnaryExp    go to state 94
    UnaryOp     go to state 38


State 62

   73 MulExp: MulExp '/' • UnaryExp

    IDENT      shift, and go to state 27
    INT_CONST  shift, and go to state 28
    '('        shift, and go to state 29
    '+'        shift, and go to state 30
    '-'        shift, and go to state 31
    '!'        shift, and go to state 32

    LVal        go to state 34
    PrimaryExp  go to state 35
    Number      go to state 36
    UnaryExp    go to state 95
    UnaryOp     go to state 38


State 63

   74 MulExp: MulExp '%' • UnaryExp

    IDENT      shift, and go to state 27
    INT_CONST  shift, and go to state 28
    '('        shift, and go to state 29
    '+'        shift, and go to state 30
    '-'        shift, and go to state 31
    '!'        shift, and go to state 32

    LVal        go to state 34
    PrimaryExp  go to state 35
    Number      go to state 36
    UnaryExp    go to state 96
    UnaryOp     go to state 38


State 64

   76 AddExp: AddExp '+' • MulExp

    IDENT      shift, and go to state 27
    INT_CONST  shift, and go to state 28
    '('        shift, and go to state 29
    '+'        shift, and go to state 30
    '-'        shift, and go to state 31
    '!'        shift, and go to state 32

    LVal        go to state 34
    PrimaryExp  go to state 35
    Number      go to state 36
    UnaryExp    go to state 37
    UnaryOp     go to state 38
    MulExp      go to state 97


State 65

   77 AddExp: AddExp '-' • MulExp

    IDENT      shift, and go to state 27
    INT_CONST  shift, and go to state 28
    '('        shift, and go to state 29
    '+'        shift, and go to state 30
    '-'        shift, and go to state 31
    '!'        shift, and go to state 32

    LVal        go to state 34
    PrimaryExp  go to state 35
    Number      go to state 36
    UnaryExp    go to state 37
    UnaryOp     go to state 38
    MulExp      go to state 98


State 66

   82 RelExp: RelExp GE • AddExp

    IDENT      shift, and go to state 27
    INT_CONST  shift, and go to state 28
    '('        shift, and go to state 29
    '+'        shift, and go to state 30
    '-'        shift, and go to state 31
    '!'        shift, and go to state 32

    LVal        go to state 34
    PrimaryExp  go to state 35
    Number      go to state 36
    UnaryExp    go to state 37
    UnaryOp     go to state 38
    MulExp      go to state 39
    AddExp      go to state 99


State 67

   81 RelExp: RelExp LE • AddExp

    IDENT      shift, and go to state 27
    INT_CONST  shift, and go to state 28
    '('        shift, and go to state 29
    '+'        shift, and go to state 30
    '-'        shift, and go to state 31
    '!'        shift, and go to state 32

    LVal        go to state 34
    PrimaryExp  go to state 35
    Number      go to state 36
    UnaryExp    go to state 37
    UnaryOp     go to state 38
    MulExp      go to state 39
    AddExp      go to state 100


State 68

   79 RelExp: RelExp '<' • AddExp

    IDENT      shift, and go to state 27
    INT_CONST  shift, and go to state 28
    '('        shift, and go to state 29
    '+'        shift, and go to state 30
    '-'        shift, and go to state 31
    '!'        shift, and go to state 32

    LVal        go to state 34
    PrimaryExp  go to state 35
    Number      go to state 36
    UnaryExp    go to state 37
    UnaryOp     go to state 38
    MulExp      go to state 39
    AddExp      go to state 101


State 69

   80 RelExp: RelExp '>' • AddExp

    IDENT      shift, and go to state 27
    INT_CONST  shift, and go to state 28
    '('        shift, and go to state 29
    '+'        shift, and go to state 30
    '-'        shift, and go to state 31
    '!'        shift, and go to state 32

    LVal        go to state 34
    PrimaryExp  go to state 35
    Number      go to state 36
    UnaryExp    go to state 37
    UnaryOp     go to state 38
    MulExp      go to state 39
    AddExp      go to state 102


State 70

   84 EqExp: EqExp EQ • RelExp

    IDENT      shift, and go to state 27
    INT_CONST  shift, and go to state 28
    '('        shift, and go to state 29
    '+'        shift, and go to state 30
    '-'        shift, and go to state 31
    '!'        shift, and go to state 32

    LVal        go to state 34
    PrimaryExp  go to state 35
    Number      go to state 36
    UnaryExp    go to state 37
    UnaryOp     go to state 38
    MulExp      go to state 39
    AddExp      go to state 40
    RelExp      go to state 103


State 71

   85 EqExp: EqExp NE • RelExp

    IDENT      shift, and go to state 27
    INT_CONST  shift, and go to state 28
    '('        shift, and go to state 29
    '+'        shift, and go to state 30
    '-'        shift, and go to state 31
    '!'        shift, and go to state 32

    LVal        go to state 34
    PrimaryExp  go to state 35
    Number      go to state 36
    UnaryExp    go to state 37
    UnaryOp     go to state 38
    MulExp      go to state 39
    AddExp      go to state 40
    RelExp      go to state 104


State 72

   87 LAndExp: LAndExp AND • EqExp

    IDENT      shift, and go to state 27
    INT_CONST  shift, and go to state 28
    '('        shift, and go to state 29
    '+'        shift, and go to state 30
    '-'        shift, and go to state 31
    '!'        shift, and go to state 32

    LVal        go to state 34
    PrimaryExp  go to state 35
    Number      go to state 36
    UnaryExp    go to state 37
    UnaryOp     go to state 38
    MulExp      go to state 39
    AddExp      go to state 40
    RelExp      go to state 41
    EqExp       go to state 105


State 73

   89 LOrExp: LOrExp OR • LAndExp

    IDENT      shift, and go to state 27
    INT_CONST  shift, and go to state 28
    '('        shift, and go to state 29
    '+'        shift, and go to state 30
    '-'        shift, and go to state 31
    '!'        shift, and go to state 32

    LVal        go to state 34
    PrimaryExp  go to state 35
    Number      go to state 36
    UnaryExp    go to state 37
    UnaryOp     go to state 38
    MulExp      go to state 39
    AddExp      go to state 40
    RelExp      go to state 41
    EqExp       go to state 42
    LAndExp     go to state 106


State 74

   12 ConstExpList: '[' ConstExp ']' • ConstExpList

    '['  shift, and go to state 19

    $default  reduce using rule 11 (ConstExpList)

    ConstExpList  go to state 107


State 75

   24 InitVal: '{' • '}'
   25        | '{' • InitVal InitValList '}'

    IDENT      shift, and go to state 27
    INT_CONST  shift, and go to state 28
    '{'        shift, and go to state 75
    '}'        shift, and go to state 108
    '('        shift, and go to state 29
    '+'        shift, and go to state 30
    '-'        shift, and go to state 31
    '!'        shift, and go to state 32

    InitVal     go to state 109
    Exp         go to state 77
    LVal        go to state 34
    PrimaryExp  go to state 35
    Number      go to state 36
    UnaryExp    go to state 37
    UnaryOp     go to state 38
    MulExp      go to state 39
    AddExp      go to state 40
    RelExp      go to state 41
    EqExp       go to state 42
    LAndExp     go to state 43
    LOrExp      go to state 44


State 76

   22 VarDef: IDENT ConstExpList '=' InitVal •

    $default  reduce using rule 22 (VarDef)


State 77

   23 InitVal: Exp •

    $default  reduce using rule 23 (InitVal)


State 78

   20 VarDefList: ',' VarDef VarDefList •

    $default  reduce using rule 20 (VarDefList)


State 79

   37 Block: '{' • BlockItemList '}'

    INT        shift, and go to state 12
    RETURN     shift, and go to state 110
    CONST      shift, and go to state 5
    IF         shift, and go to state 111
    WHILE      shift, and go to state 112
    BREAK      shift, and go to state 113
    CONTINUE   shift, and go to state 114
    IDENT      shift, and go to state 27
    INT_CONST  shift, and go to state 28
    ';'        shift, and go to state 115
    '{'        shift, and go to state 79
    '('        shift, and go to state 29
    '+'        shift, and go to state 30
    '-'        shift, and go to state 31
    '!'        shift, and go to state 32

    $default  reduce using rule 38 (BlockItemList)

    Decl           go to state 116
    ConstDecl      go to state 7
    BType          go to state 8
    VarDecl        go to state 9
    Block          go to state 117
    BlockItemList  go to state 118
    BlockItem      go to state 119
    Stmt           go to state 120
    Exp            go to state 121
    LVal           go to state 122
    PrimaryExp     go to state 35
    Number         go to state 36
    UnaryExp       go to state 37
    UnaryOp        go to state 38
    MulExp         go to state 39
    AddExp         go to state 40
    RelExp         go to state 41
    EqExp          go to state 42
    LAndExp        go to state 43
    LOrExp         go to state 44


State 80

   28 FuncDef: FuncType IDENT '(' ')' Block •

    $default  reduce using rule 28 (FuncDef)


State 81

   35 FuncFParam: BType IDENT •
   36           | BType IDENT • '[' ']' ConstExpList

    '['  shift, and go to state 123

    $default  reduce using rule 35 (FuncFParam)


State 82

   29 FuncDef: FuncType IDENT '(' FuncFParams ')' • Block

    '{'  shift, and go to state 79

    Block  go to state 124


State 83

   34 FuncFParamsList: ',' • FuncFParam FuncFParamsList

    INT  shift, and go to state 12

    BType       go to state 50
    FuncFParam  go to state 125


State 84

   32 FuncFParams: FuncFParam FuncFParamsList •

    $default  reduce using rule 32 (FuncFParams)


State 85

   14 ConstInitVal: '{' • '}'
   15             | '{' • ConstInitVal ConstInitValList '}'

    IDENT      shift, and go to state 27
    INT_CONST  shift, and go to state 28
    '{'        shift, and go to state 85
    '}'        shift, and go to state 126
    '('        shift, and go to state 29
    '+'        shift, and go to state 30
    '-'        shift, and go to state 31
    '!'        shift, and go to state 32

    ConstInitVal  go to state 127
    Exp           go to state 33
    LVal          go to state 34
    PrimaryExp    go to state 35
    Number        go to state 36
    UnaryExp      go to state 37
    UnaryOp       go to state 38
    MulExp        go to state 39
    AddExp        go to state 40
    RelExp        go to state 41
    EqExp         go to state 42
    LAndExp       go to state 43
    LOrExp        go to state 44
    ConstExp      go to state 87


State 86

   10 ConstDef: IDENT ConstExpList '=' ConstInitVal •

    $default  reduce using rule 10 (ConstDef)


State 87

   13 ConstInitVal: ConstExp •

    $default  reduce using rule 13 (ConstInitVal)


State 88

    8 ConstDefList: ',' ConstDef ConstDefList •

    $default  reduce using rule 8 (ConstDefList)


State 89

   56 ExpList1: '[' Exp • ']' ExpList1

    ']'  shift, and go to state 128


State 90

   62 UnaryExp: IDENT '(' ')' •

    $default  reduce using rule 62 (UnaryExp)


State 91

   68 FuncRParams: Exp • ExpList2

    ','  shift, and go to state 129

    $default  reduce using rule 69 (ExpList2)

    ExpList2  go to state 130


State 92

   63 UnaryExp: IDENT '(' FuncRParams • ')'

    ')'  shift, and go to state 131


State 93

   57 PrimaryExp: '(' Exp ')' •

    $default  reduce using rule 57 (PrimaryExp)


State 94

   72 MulExp: MulExp '*' UnaryExp •

    $default  reduce using rule 72 (MulExp)


State 95

   73 MulExp: MulExp '/' UnaryExp •

    $default  reduce using rule 73 (MulExp)


State 96

   74 MulExp: MulExp '%' UnaryExp •

    $default  reduce using rule 74 (MulExp)


State 97

   72 MulExp: MulExp • '*' UnaryExp
   73       | MulExp • '/' UnaryExp
   74       | MulExp • '%' UnaryExp
   76 AddExp: AddExp '+' MulExp •

    '*'  shift, and go to state 61
    '/'  shift, and go to state 62
    '%'  shift, and go to state 63

    $default  reduce using rule 76 (AddExp)


State 98

   72 MulExp: MulExp • '*' UnaryExp
   73       | MulExp • '/' UnaryExp
   74       | MulExp • '%' UnaryExp
   77 AddExp: AddExp '-' MulExp •

    '*'  shift, and go to state 61
    '/'  shift, and go to state 62
    '%'  shift, and go to state 63

    $default  reduce using rule 77 (AddExp)


State 99

   76 AddExp: AddExp • '+' MulExp
   77       | AddExp • '-' MulExp
   82 RelExp: RelExp GE AddExp •

    '+'  shift, and go to state 64
    '-'  shift, and go to state 65

    $default  reduce using rule 82 (RelExp)


State 100

   76 AddExp: AddExp • '+' MulExp
   77       | AddExp • '-' MulExp
   81 RelExp: RelExp LE AddExp •

    '+'  shift, and go to state 64
    '-'  shift, and go to state 65

    $default  reduce using rule 81 (RelExp)


State 101

   76 AddExp: AddExp • '+' MulExp
   77       | AddExp • '-' MulExp
   79 RelExp: RelExp '<' AddExp •

    '+'  shift, and go to state 64
    '-'  shift, and go to state 65

    $default  reduce using rule 79 (RelExp)


State 102

   76 AddExp: AddExp • '+' MulExp
   77       | AddExp • '-' MulExp
   80 RelExp: RelExp '>' AddExp •

    '+'  shift, and go to state 64
    '-'  shift, and go to state 65

    $default  reduce using rule 80 (RelExp)


State 103

   79 RelExp: RelExp • '<' AddExp
   80       | RelExp • '>' AddExp
   81       | RelExp • LE AddExp
   82       | RelExp • GE AddExp
   84 EqExp: EqExp EQ RelExp •

    GE   shift, and go to state 66
    LE   shift, and go to state 67
    '<'  shift, and go to state 68
    '>'  shift, and go to state 69

    $default  reduce using rule 84 (EqExp)


State 104

   79 RelExp: RelExp • '<' AddExp
   80       | RelExp • '>' AddExp
   81       | RelExp • LE AddExp
   82       | RelExp • GE AddExp
   85 EqExp: EqExp NE RelExp •

    GE   shift, and go to state 66
    LE   shift, and go to state 67
    '<'  shift, and go to state 68
    '>'  shift, and go to state 69

    $default  reduce using rule 85 (EqExp)


State 105

   84 EqExp: EqExp • EQ RelExp
   85      | EqExp • NE RelExp
   87 LAndExp: LAndExp AND EqExp •

    EQ  shift, and go to state 70
    NE  shift, and go to state 71

    $default  reduce using rule 87 (LAndExp)


State 106

   87 LAndExp: LAndExp • AND EqExp
   89 LOrExp: LOrExp OR LAndExp •

    AND  shift, and go to state 72

    $default  reduce using rule 89 (LOrExp)


State 107

   12 ConstExpList: '[' ConstExp ']' ConstExpList •

    $default  reduce using rule 12 (ConstExpList)


State 108

   24 InitVal: '{' '}' •

    $default  reduce using rule 24 (InitVal)


State 109

   25 InitVal: '{' InitVal • InitValList '}'

    ','  shift, and go to state 132

    $default  reduce using rule 26 (InitValList)

    InitValList  go to state 133


State 110

   51 Stmt: RETURN • ';'
   52     | RETURN • Exp ';'

    IDENT      shift, and go to state 27
    INT_CONST  shift, and go to state 28
    ';'        shift, and go to state 134
    '('        shift, and go to state 29
    '+'        shift, and go to state 30
    '-'        shift, and go to state 31
    '!'        shift, and go to state 32

    Exp         go to state 135
    LVal        go to state 34
    PrimaryExp  go to state 35
    Number      go to state 36
    UnaryExp    go to state 37
    UnaryOp     go to state 38
    MulExp      go to state 39
    AddExp      go to state 40
    RelExp      go to state 41
    EqExp       go to state 42
    LAndExp     go to state 43
    LOrExp      go to state 44


State 111

   46 Stmt: IF • '(' Exp ')' Stmt
   47     | IF • '(' Exp ')' Stmt ELSE Stmt

    '('  shift, and go to state 136


State 112

   48 Stmt: WHILE • '(' Exp ')' Stmt

    '('  shift, and go to state 137


State 113

   49 Stmt: BREAK • ';'

    ';'  shift, and go to state 138


State 114

   50 Stmt: CONTINUE • ';'

    ';'  shift, and go to state 139


State 115

   43 Stmt: ';' •

    $default  reduce using rule 43 (Stmt)


State 116

   40 BlockItem: Decl •

    $default  reduce using rule 40 (BlockItem)


State 117

   45 Stmt: Block •

    $default  reduce using rule 45 (Stmt)


State 118

   37 Block: '{' BlockItemList • '}'

    '}'  shift, and go to state 140


State 119

   39 BlockItemList: BlockItem • BlockItemList

    INT        shift, and go to state 12
    RETURN     shift, and go to state 110
    CONST      shift, and go to state 5
    IF         shift, and go to state 111
    WHILE      shift, and go to state 112
    BREAK      shift, and go to state 113
    CONTINUE   shift, and go to state 114
    IDENT      shift, and go to state 27
    INT_CONST  shift, and go to state 28
    ';'        shift, and go to state 115
    '{'        shift, and go to state 79
    '('        shift, and go to state 29
    '+'        shift, and go to state 30
    '-'        shift, and go to state 31
    '!'        shift, and go to state 32

    $default  reduce using rule 38 (BlockItemList)

    Decl           go to state 116
    ConstDecl      go to state 7
    BType          go to state 8
    VarDecl        go to state 9
    Block          go to state 117
    BlockItemList  go to state 141
    BlockItem      go to state 119
    Stmt           go to state 120
    Exp            go to state 121
    LVal           go to state 122
    PrimaryExp     go to state 35
    Number         go to state 36
    UnaryExp       go to state 37
    UnaryOp        go to state 38
    MulExp         go to state 39
    AddExp         go to state 40
    RelExp         go to state 41
    EqExp          go to state 42
    LAndExp        go to state 43
    LOrExp         go to state 44


State 120

   41 BlockItem: Stmt •

    $default  reduce using rule 41 (BlockItem)


State 121

   44 Stmt: Exp • ';'

    ';'  shift, and go to state 142


State 122

   42 Stmt: LVal • '=' Exp ';'
   58 PrimaryExp: LVal •

    '='  shift, and go to state 143

    $default  reduce using rule 58 (PrimaryExp)


State 123

   36 FuncFParam: BType IDENT '[' • ']' ConstExpList

    ']'  shift, and go to state 144


State 124

   29 FuncDef: FuncType IDENT '(' FuncFParams ')' Block •

    $default  reduce using rule 29 (FuncDef)


State 125

   34 FuncFParamsList: ',' FuncFParam • FuncFParamsList

    ','  shift, and go to state 83

    $default  reduce using rule 33 (FuncFParamsList)

    FuncFParamsList  go to state 145


State 126

   14 ConstInitVal: '{' '}' •

    $default  reduce using rule 14 (ConstInitVal)


State 127

   15 ConstInitVal: '{' ConstInitVal • ConstInitValList '}'

    ','  shift, and go to state 146

    $default  reduce using rule 16 (ConstInitValList)

    ConstInitValList  go to state 147


State 128

   56 ExpList1: '[' Exp ']' • ExpList1

    '['  shift, and go to state 56

    $default  reduce using rule 55 (ExpList1)

    ExpList1  go to state 148


State 129

   70 ExpList2: ',' • Exp ExpList2

    IDENT      shift, and go to state 27
    INT_CONST  shift, and go to state 28
    '('        shift, and go to state 29
    '+'        shift, and go to state 30
    '-'        shift, and go to state 31
    '!'        shift, and go to state 32

    Exp         go to state 149
    LVal        go to state 34
    PrimaryExp  go to state 35
    Number      go to state 36
    UnaryExp    go to state 37
    UnaryOp     go to state 38
    MulExp      go to state 39
    AddExp      go to state 40
    RelExp      go to state 41
    EqExp       go to state 42
    LAndExp     go to state 43
    LOrExp      go to state 44


State 130

   68 FuncRParams: Exp ExpList2 •

    $default  reduce using rule 68 (FuncRParams)


State 131

   63 UnaryExp: IDENT '(' FuncRParams ')' •

    $default  reduce using rule 63 (UnaryExp)


State 132

   27 InitValList: ',' • InitVal InitValList

    IDENT      shift, and go to state 27
    INT_CONST  shift, and go to state 28
    '{'        shift, and go to state 75
    '('        shift, and go to state 29
    '+'        shift, and go to state 30
    '-'        shift, and go to state 31
    '!'        shift, and go to state 32

    InitVal     go to state 150
    Exp         go to state 77
    LVal        go to state 34
    PrimaryExp  go to state 35
    Number      go to state 36
    UnaryExp    go to state 37
    UnaryOp     go to state 38
    MulExp      go to state 39
    AddExp      go to state 40
    RelExp      go to state 41
    EqExp       go to state 42
    LAndExp     go to state 43
    LOrExp      go to state 44


State 133

   25 InitVal: '{' InitVal InitValList • '}'

    '}'  shift, and go to state 151


State 134

   51 Stmt: RETURN ';' •

    $default  reduce using rule 51 (Stmt)


State 135

   52 Stmt: RETURN Exp • ';'

    ';'  shift, and go to state 152


State 136

   46 Stmt: IF '(' • Exp ')' Stmt
   47     | IF '(' • Exp ')' Stmt ELSE Stmt

    IDENT      shift, and go to state 27
    INT_CONST  shift, and go to state 28
    '('        shift, and go to state 29
    '+'        shift, and go to state 30
    '-'        shift, and go to state 31
    '!'        shift, and go to state 32

    Exp         go to state 153
    LVal        go to state 34
    PrimaryExp  go to state 35
    Number      go to state 36
    UnaryExp    go to state 37
    UnaryOp     go to state 38
    MulExp      go to state 39
    AddExp      go to state 40
    RelExp      go to state 41
    EqExp       go to state 42
    LAndExp     go to state 43
    LOrExp      go to state 44


State 137

   48 Stmt: WHILE '(' • Exp ')' Stmt

    IDENT      shift, and go to state 27
    INT_CONST  shift, and go to state 28
    '('        shift, and go to state 29
    '+'        shift, and go to state 30
    '-'        shift, and go to state 31
    '!'        shift, and go to state 32

    Exp         go to state 154
    LVal        go to state 34
    PrimaryExp  go to state 35
    Number      go to state 36
    UnaryExp    go to state 37
    UnaryOp     go to state 38
    MulExp      go to state 39
    AddExp      go to state 40
    RelExp      go to state 41
    EqExp       go to state 42
    LAndExp     go to state 43
    LOrExp      go to state 44


State 138

   49 Stmt: BREAK ';' •

    $default  reduce using rule 49 (Stmt)


State 139

   50 Stmt: CONTINUE ';' •

    $default  reduce using rule 50 (Stmt)


State 140

   37 Block: '{' BlockItemList '}' •

    $default  reduce using rule 37 (Block)


State 141

   39 BlockItemList: BlockItem BlockItemList •

    $default  reduce using rule 39 (BlockItemList)


State 142

   44 Stmt: Exp ';' •

    $default  reduce using rule 44 (Stmt)


State 143

   42 Stmt: LVal '=' • Exp ';'

    IDENT      shift, and go to state 27
    INT_CONST  shift, and go to state 28
    '('        shift, and go to state 29
    '+'        shift, and go to state 30
    '-'        shift, and go to state 31
    '!'        shift, and go to state 32

    Exp         go to state 155
    LVal        go to state 34
    PrimaryExp  go to state 35
    Number      go to state 36
    UnaryExp    go to state 37
    UnaryOp     go to state 38
    MulExp      go to state 39
    AddExp      go to state 40
    RelExp      go to state 41
    EqExp       go to state 42
    LAndExp     go to state 43
    LOrExp      go to state 44


State 144

   36 FuncFParam: BType IDENT '[' ']' • ConstExpList

    '['  shift, and go to state 19

    $default  reduce using rule 11 (ConstExpList)

    ConstExpList  go to state 156


State 145

   34 FuncFParamsList: ',' FuncFParam FuncFParamsList •

    $default  reduce using rule 34 (FuncFParamsList)


State 146

   17 ConstInitValList: ',' • ConstInitVal ConstInitValList

    IDENT      shift, and go to state 27
    INT_CONST  shift, and go to state 28
    '{'        shift, and go to state 85
    '('        shift, and go to state 29
    '+'        shift, and go to state 30
    '-'        shift, and go to state 31
    '!'        shift, and go to state 32

    ConstInitVal  go to state 157
    Exp           go to state 33
    LVal          go to state 34
    PrimaryExp    go to state 35
    Number        go to state 36
    UnaryExp      go to state 37
    UnaryOp       go to state 38
    MulExp        go to state 39
    AddExp        go to state 40
    RelExp        go to state 41
    EqExp         go to state 42
    LAndExp       go to state 43
    LOrExp        go to state 44
    ConstExp      go to state 87


State 147

   15 ConstInitVal: '{' ConstInitVal ConstInitValList • '}'

    '}'  shift, and go to state 158


State 148

   56 ExpList1: '[' Exp ']' ExpList1 •

    $default  reduce using rule 56 (ExpList1)


State 149

   70 ExpList2: ',' Exp • ExpList2

    ','  shift, and go to state 129

    $default  reduce using rule 69 (ExpList2)

    ExpList2  go to state 159


State 150

   27 InitValList: ',' InitVal • InitValList

    ','  shift, and go to state 132

    $default  reduce using rule 26 (InitValList)

    InitValList  go to state 160


State 151

   25 InitVal: '{' InitVal InitValList '}' •

    $default  reduce using rule 25 (InitVal)


State 152

   52 Stmt: RETURN Exp ';' •

    $default  reduce using rule 52 (Stmt)


State 153

   46 Stmt: IF '(' Exp • ')' Stmt
   47     | IF '(' Exp • ')' Stmt ELSE Stmt

    ')'  shift, and go to state 161


State 154

   48 Stmt: WHILE '(' Exp • ')' Stmt

    ')'  shift, and go to state 162


State 155

   42 Stmt: LVal '=' Exp • ';'

    ';'  shift, and go to state 163


State 156

   36 FuncFParam: BType IDENT '[' ']' ConstExpList •

    $default  reduce using rule 36 (FuncFParam)


State 157

   17 ConstInitValList: ',' ConstInitVal • ConstInitValList

    ','  shift, and go to state 146

    $default  reduce using rule 16 (ConstInitValList)

    ConstInitValList  go to state 164


State 158

   15 ConstInitVal: '{' ConstInitVal ConstInitValList '}' •

    $default  reduce using rule 15 (ConstInitVal)


State 159

   70 ExpList2: ',' Exp ExpList2 •

    $default  reduce using rule 70 (ExpList2)


State 160

   27 InitValList: ',' InitVal InitValList •

    $default  reduce using rule 27 (InitValList)


State 161

   46 Stmt: IF '(' Exp ')' • Stmt
   47     | IF '(' Exp ')' • Stmt ELSE Stmt

    RETURN     shift, and go to state 110
    IF         shift, and go to state 111
    WHILE      shift, and go to state 112
    BREAK      shift, and go to state 113
    CONTINUE   shift, and go to state 114
    IDENT      shift, and go to state 27
    INT_CONST  shift, and go to state 28
    ';'        shift, and go to state 115
    '{'        shift, and go to state 79
    '('        shift, and go to state 29
    '+'        shift, and go to state 30
    '-'        shift, and go to state 31
    '!'        shift, and go to state 32

    Block       go to state 117
    Stmt        go to state 165
    Exp         go to state 121
    LVal        go to state 122
    PrimaryExp  go to state 35
    Number      go to state 36
    UnaryExp    go to state 37
    UnaryOp     go to state 38
    MulExp      go to state 39
    AddExp      go to state 40
    RelExp      go to state 41
    EqExp       go to state 42
    LAndExp     go to state 43
    LOrExp      go to state 44


State 162

   48 Stmt: WHILE '(' Exp ')' • Stmt

    RETURN     shift, and go to state 110
    IF         shift, and go to state 111
    WHILE      shift, and go to state 112
    BREAK      shift, and go to state 113
    CONTINUE   shift, and go to state 114
    IDENT      shift, and go to state 27
    INT_CONST  shift, and go to state 28
    ';'        shift, and go to state 115
    '{'        shift, and go to state 79
    '('        shift, and go to state 29
    '+'        shift, and go to state 30
    '-'        shift, and go to state 31
    '!'        shift, and go to state 32

    Block       go to state 117
    Stmt        go to state 166
    Exp         go to state 121
    LVal        go to state 122
    PrimaryExp  go to state 35
    Number      go to state 36
    UnaryExp    go to state 37
    UnaryOp     go to state 38
    MulExp      go to state 39
    AddExp      go to state 40
    RelExp      go to state 41
    EqExp       go to state 42
    LAndExp     go to state 43
    LOrExp      go to state 44


State 163

   42 Stmt: LVal '=' Exp ';' •

    $default  reduce using rule 42 (Stmt)


State 164

   17 ConstInitValList: ',' ConstInitVal ConstInitValList •

    $default  reduce using rule 17 (ConstInitValList)


State 165

   46 Stmt: IF '(' Exp ')' Stmt •
   47     | IF '(' Exp ')' Stmt • ELSE Stmt

    ELSE  shift, and go to state 167

    ELSE      [reduce using rule 46 (Stmt)]
    $default  reduce using rule 46 (Stmt)

    shift/reduce conflict on token ELSE:
       46 Stmt: IF '(' Exp ')' Stmt •
       47 Stmt: IF '(' Exp ')' Stmt • ELSE Stmt
      Example: IF '(' Exp ')' IF '(' Exp ')' Stmt • ELSE Stmt
      Shift derivation
        Stmt
        ↳ 46: IF '(' Exp ')' Stmt
                             ↳ 47: IF '(' Exp ')' Stmt • ELSE Stmt
      Reduce derivation
        Stmt
        ↳ 47: IF '(' Exp ')' Stmt                        ELSE Stmt
                             ↳ 46: IF '(' Exp ')' Stmt •



State 166

   48 Stmt: WHILE '(' Exp ')' Stmt •

    $default  reduce using rule 48 (Stmt)


State 167

   47 Stmt: IF '(' Exp ')' Stmt ELSE • Stmt

    RETURN     shift, and go to state 110
    IF         shift, and go to state 111
    WHILE      shift, and go to state 112
    BREAK      shift, and go to state 113
    CONTINUE   shift, and go to state 114
    IDENT      shift, and go to state 27
    INT_CONST  shift, and go to state 28
    ';'        shift, and go to state 115
    '{'        shift, and go to state 79
    '('        shift, and go to state 29
    '+'        shift, and go to state 30
    '-'        shift, and go to state 31
    '!'        shift, and go to state 32

    Block       go to state 117
    Stmt        go to state 168
    Exp         go to state 121
    LVal        go to state 122
    PrimaryExp  go to state 35
    Number      go to state 36
    UnaryExp    go to state 37
    UnaryOp     go to state 38
    MulExp      go to state 39
    AddExp      go to state 40
    RelExp      go to state 41
    EqExp       go to state 42
    LAndExp     go to state 43
    LOrExp      go to state 44


State 168

   47 Stmt: IF '(' Exp ')' Stmt ELSE Stmt •

    $default  reduce using rule 47 (Stmt)
